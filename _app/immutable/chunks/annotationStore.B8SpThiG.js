import{d as v,w as B}from"./index.DsiQ7ewd.js";import{B as E,c as w}from"./aioli.BDahayWZ.js";function G(e){const s=e.split(`
`),n=[],o=[];for(const t of s)t.startsWith("#")?n.push(t):t.trim()!==""&&o.push(t);return o.sort((t,u)=>{const l=t.split("	"),b=u.split("	"),p=l[0].localeCompare(b[0]);return p!==0?p:Number.parseInt(l[3],10)-Number.parseInt(b[3],10)}),[...n,...o].join(`
`)}function P(e){const s=e.split(`
`),n=[];for(const o of s){if(o.startsWith("##FASTA"))break;n.push(o)}return n.join(`
`)}function T(){const e={features:[],chromosomes:[]},{subscribe:s,set:n,update:o}=B(e);return{subscribe:s,set:n,update:o,reset:()=>n(e),addGene:r=>o(t=>(t.features.push(r),t)),addChromosome:r=>o(t=>(t.chromosomes.push(r),t)),load:async r=>{const t=r.split(`
`),u=[],l=[];for(const c of t){if(c.startsWith("##FASTA"))break;if(c.startsWith("##sequence-region")){const[,f,,m]=c.split(/\s+/);if(f===void 0||m===void 0)throw new Error(`Invalid sequence-region line: ${c}`);l.push({name:f,length:Number.parseInt(m)})}else if(!c.startsWith("#")){const[f,m,S,A,D,W,d,y,L]=c.split("	"),g={};for(const k of L.split(";")){const[q,j]=k.split("=");g[q]=j}if(d!=="+"&&d!=="-")throw new Error(`Invalid strand value: ${d}`);u.push({seqname:f,source:m,type:S,start:Number.parseInt(A),end:Number.parseInt(D),score:Number.parseFloat(W),strand:d,frame:Number.parseInt(y),attributes:g})}}const p=P(r).replaceAll(" CDS",""),h=G(p),a=await new E([{tool:"tabix",version:"1.17",urlPrefix:`${window.location.origin}./tools/tabix`},{tool:"bgzip",version:"1.17",urlPrefix:`${window.location.origin}./tools/bgzip`}]),i=await a.mount([{name:"data.gff",data:h}]);await a.exec(`bgzip ${i[0]}`),await a.exec(`tabix -p gff ${i[0]}.gz`);const $=await a.fs.stat(`${i[0]}.gz`),x=await a.read({path:`${i[0]}.gz`,length:$.size}),C=w(x),I=await a.fs.stat(`${i[0]}.gz.tbi`),F=await a.read({path:`${i[0]}.gz.tbi`,length:I.size}),N=w(F);n({features:u,chromosomes:l,url:C,indexUrl:N})}}}const z=T();v(z,e=>({features:e.features.filter(s=>s.type==="gene"),chromosomes:e.chromosomes}));v(z,e=>e.features.map(s=>s.attributes.Name).filter(s=>s!==void 0));export{z as a};
