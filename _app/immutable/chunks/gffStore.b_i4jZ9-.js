import{d as p,w as y}from"./index.dLrZfUXX.js";function S(){const{subscribe:r,set:e,update:u}=y({features:[],chromosomes:[]});return{subscribe:r,set:e,update:u,reset:()=>e({features:[],chromosomes:[]}),addGene:o=>u(t=>(t.features.push(o),t)),addChromosome:o=>u(t=>(t.chromosomes.push(o),t)),fromText:o=>{const t=o.split(`
`),m=[],c=[];for(const s of t){if(s.startsWith("##FASTA"))break;if(s.startsWith("##sequence-region")){const[,n,,a]=s.split(/\s+/);if(n===void 0||a===void 0)throw new Error(`Invalid sequence-region line: ${s}`);c.push({name:n,length:Number.parseInt(a)})}else if(!s.startsWith("#")){const[n,a,l,h,b,v,i,g,N]=s.split("	"),f={};for(const w of N.split(";")){const[I,q]=w.split("=");f[I]=q}if(i!=="+"&&i!=="-")throw new Error(`Invalid strand value: ${i}`);m.push({seqname:n,source:a,type:l,start:Number.parseInt(h),end:Number.parseInt(b),score:Number.parseFloat(v),strand:i,frame:Number.parseInt(g),attributes:f})}}e({features:m,chromosomes:c})}}}const d=S();p(d,r=>({features:r.features.filter(e=>e.type==="gene"),chromosomes:r.chromosomes}));const k=p(d,r=>r.features.map(e=>e.attributes.Name).filter(e=>e!==void 0));export{k as a,d as g};
