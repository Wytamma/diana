import{w as B}from"./3ms3zztt.js";import{L as Q}from"./BhI1zJCn.js";function g(t){const l=new Blob([t],{type:"application/octet-stream"});return URL.createObjectURL(l)}const x=Symbol("Comlink.proxy"),j=Symbol("Comlink.endpoint"),P=Symbol("Comlink.releaseProxy"),L=Symbol("Comlink.thrown"),I=t=>typeof t=="object"&&t!==null||typeof t=="function",E={canHandle:t=>I(t)&&t[x],serialize(t){const{port1:l,port2:c}=new MessageChannel;return C(t,l),[c,[c]]},deserialize(t){return t.start(),k(t)}},M={canHandle:t=>I(t)&&L in t,serialize({value:t}){let l;return t instanceof Error?l={isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:l={isError:!1,value:t},[l,[]]},deserialize(t){throw t.isError?Object.assign(new Error(t.value.message),t.value):t.value}},H=new Map([["proxy",E],["throw",M]]);function C(t,l=self){l.addEventListener("message",function c(n){if(!n||!n.data)return;const{id:b,type:s,path:i}=Object.assign({path:[]},n.data),m=(n.data.argumentList||[]).map(o);let e;try{const a=i.slice(0,-1).reduce((d,u)=>d[u],t),Z=i.reduce((d,u)=>d[u],t);switch(s){case"GET":e=Z;break;case"SET":a[i.slice(-1)[0]]=o(n.data.value),e=!0;break;case"APPLY":e=Z.apply(a,m);break;case"CONSTRUCT":{const d=new Z(...m);e=$(d)}break;case"ENDPOINT":{const{port1:d,port2:u}=new MessageChannel;C(t,u),e=D(d,[d])}break;case"RELEASE":e=void 0;break;default:return}}catch(a){e={value:a,[L]:0}}Promise.resolve(e).catch(a=>({value:a,[L]:0})).then(a=>{const[Z,d]=S(a);l.postMessage(Object.assign(Object.assign({},Z),{id:b}),d),s==="RELEASE"&&(l.removeEventListener("message",c),N(l))})}),l.start&&l.start()}function O(t){return t.constructor.name==="MessagePort"}function N(t){O(t)&&t.close()}function k(t,l){return Y(t,[],l)}function X(t){if(t)throw new Error("Proxy has been released and is not useable")}function Y(t,l=[],c=function(){}){let n=!1;const b=new Proxy(c,{get(s,i){if(X(n),i===P)return()=>p(t,{type:"RELEASE",path:l.map(m=>m.toString())}).then(()=>{N(t),n=!0});if(i==="then"){if(l.length===0)return{then:()=>b};const m=p(t,{type:"GET",path:l.map(e=>e.toString())}).then(o);return m.then.bind(m)}return Y(t,[...l,i])},set(s,i,m){X(n);const[e,a]=S(m);return p(t,{type:"SET",path:[...l,i].map(Z=>Z.toString()),value:e},a).then(o)},apply(s,i,m){X(n);const e=l[l.length-1];if(e===j)return p(t,{type:"ENDPOINT"}).then(o);if(e==="bind")return Y(t,l.slice(0,-1));const[a,Z]=R(m);return p(t,{type:"APPLY",path:l.map(d=>d.toString()),argumentList:a},Z).then(o)},construct(s,i){X(n);const[m,e]=R(i);return p(t,{type:"CONSTRUCT",path:l.map(a=>a.toString()),argumentList:m},e).then(o)}});return b}function A(t){return Array.prototype.concat.apply([],t)}function R(t){const l=t.map(S);return[l.map(c=>c[0]),A(l.map(c=>c[1]))]}const v=new WeakMap;function D(t,l){return v.set(t,l),t}function $(t){return Object.assign(t,{[x]:!0})}function S(t){for(const[l,c]of H)if(c.canHandle(t)){const[n,b]=c.serialize(t);return[{type:"HANDLER",name:l,value:n},b]}return[{type:"RAW",value:t},v.get(t)||[]]}function o(t){switch(t.type){case"HANDLER":return H.get(t.name).deserialize(t.value);case"RAW":return t.value}}function p(t,l,c){return new Promise(n=>{const b=_();t.addEventListener("message",function s(i){!i.data||!i.data.id||i.data.id!==b||(t.removeEventListener("message",s),n(i.data))}),t.start&&t.start(),t.postMessage(Object.assign({id:b},l),c)})}function _(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}const U="",V=typeof window<"u"&&window.Blob&&new Blob([atob(U)],{type:"text/javascript;charset=utf-8"});function q(){const t=V&&(window.URL||window.webkitURL).createObjectURL(V);try{return t?new Worker(t):new Worker("data:application/javascript;base64,"+U)}finally{t&&(window.URL||window.webkitURL).revokeObjectURL(t)}}const tt="https://biowasm.com/cdn/v3",lt="https://stg.biowasm.com/cdn/v3",ct={urlCDN:tt,urlCDNStg:lt,dirShared:"/shared",dirMounted:"/mnt",dirData:"/data",printInterleaved:!0,callback:null,debug:!1,env:"prd"};class nt{constructor(l,c={}){if(l==null)throw"Expecting array of tools as input to Aioli constructor.";return Array.isArray(l)||(l=[l]),c=Object.assign({},ct,c),l=l.map(this._parseTool),c.env==="stg"&&(c.urlCDN=c.urlCDNStg),this.tools=l,this.config=c,this.config.callback!=null&&(this.callback=this.config.callback),delete this.config.callback,this.init()}async init(){const l=new q;this.callback&&(l.onmessage=n=>{n.data.type==="biowasm"&&this.callback(n.data.value)});const c=k(l);return c.tools=this.tools,c.config=this.config,await c.init(),c}_parseTool(l){if(typeof l!="string")return l;const c=l.split("/");if(c.length!=2&&c.length!=3)throw"Expecting '<tool>/<version>' or '<tool>/<program>/<version>'";return{tool:c[0],program:c.length==3?c[1]:c[0],version:c[c.length-1]}}}function et(t){const l=t.split(`
`),c=[],n=[];for(const b of l)b.startsWith("#")?c.push(b):b.trim()!==""&&n.push(b);return n.sort((b,s)=>{const i=b.split("	"),m=s.split("	"),e=i[0].localeCompare(m[0]);return e!==0?e:Number.parseInt(i[3],10)-Number.parseInt(m[3],10)}),[...c,...n].join(`
`)}function it(t){const l=t.split(`
`),c=[];for(const n of l){if(n.startsWith("##")&&n.includes("FASTA"))break;c.push(n)}return c.join(`
`)}async function K(t){if(!t.length)return{url:void 0,indexUrl:void 0};const l=await new nt([{tool:"tabix",version:"1.17",urlPrefix:`${window.location.origin}./tools/tabix`},{tool:"bgzip",version:"1.17",urlPrefix:`${window.location.origin}./tools/bgzip`}]);console.log("Generating filtered annotation URLs..."),console.log(t);const c=t.map(e=>`${e.seqId}	${e.source}	${e.type}	${e.start}	${e.stop}	${e.score}	${e.strand}	${e.phase}	`+Object.entries(e.attributes).map(([a,Z])=>`${a}=${Z}`).join(";")).join(`
`),n=await l.mount([{name:"filtered_data.gff",data:c}]);await l.exec(`bgzip ${n[0]}`),await l.exec(`tabix -p gff ${n[0]}.gz`);const b=await l.read({path:`${n[0]}.gz`,length:(await l.fs.stat(`${n[0]}.gz`)).size}),s=await l.read({path:`${n[0]}.gz.tbi`,length:(await l.fs.stat(`${n[0]}.gz.tbi`)).size});console.log("Done generating filtered annotation URLs");const i=g(b),m=g(s);return console.log({url:i,indexUrl:m}),{url:i,indexUrl:m}}function at(){const t={features:[],chromosomes:new Map,filteredFeatures:[]},l=B(t),{subscribe:c,set:n,update:b}=l;return{subscribe:c,set:n,update:b,reset:()=>n(t),load:async(s,i)=>{i=it(i),i=et(i);const m=i.split(`
`),e=[],a=new Map;let Z=0;for(const G of m){if(G.startsWith("##")&&G.includes("FASTA"))break;if(!G.startsWith("#")&&G.trim()!==""){const[h,J,z,f,r,,y,,T]=G.split("	"),F=Object.fromEntries(T.split(";").map(w=>w.split("=")));if(y!=="+"&&y!=="-")throw new Error(`Invalid strand value: ${y}`);a.has(h)||a.set(h,{name:h,length:Number.parseInt(r)});const W=a.get(h);W&&Number.parseInt(r)>W.length&&(W.length=Number.parseInt(r)),e.push({_id:Z++,seqId:h,source:J,type:z,start:Number.parseInt(f),stop:Number.parseInt(r),strand:y,attributes:F})}}const{url:d,indexUrl:u}=await K(e);n({features:e,chromosomes:a,filteredFeatures:e,filename:s,url:d,indexUrl:u})},setFilteredFeatures:async s=>{b(a=>(a.filteredFeatures=a.features.filter(Z=>s.includes(Z._id)),a.url=void 0,a.indexUrl=void 0,a));const i=Q(l),{url:m,indexUrl:e}=await K(i.filteredFeatures);b(a=>(a.url=m,a.indexUrl=e,a))},selectAll:()=>{b(s=>(s.features.length===s.filteredFeatures.length?s.filteredFeatures=[]:s.filteredFeatures=s.features,s))}}}const mt=at();export{nt as B,mt as a,g as c};
