import{B as q,c as g}from"./annotationStore.Dn3m1aBo.js";import{d as L,w as T}from"./index.1X6iZZfA.js";function U(a){const c=[];return a.forEach((o,p)=>{o.forEach(l=>{const d=l+2,t=`${p}	${l}	${d}`;c.push(t)})}),c.join(`
`)}function v(){const a={raw:new Map},{subscribe:c,set:o,update:p}=T(a);return{subscribe:c,set:o,update:p,reset:()=>o(a),load:async l=>{const d=l.split(`
`);let t="",n="";const u=new Map;for(const s of d)s.startsWith(">")?(t&&n&&u.set(t,n),t=s.substring(1).split(/\s+/)[0].trim(),n=""):n+=s.trim();t&&n&&u.set(t,n);const b=new Map;u.forEach((s,F)=>{const f=[],w=s.toUpperCase();for(let r=0;r<w.length-1;r++)w[r]==="T"&&w[r+1]==="A"&&f.push(r);b.set(F,f)});const $=U(b),e=await new q([{tool:"tabix",version:"1.17",urlPrefix:`${window.location.origin}./tools/tabix`},{tool:"bgzip",version:"1.17",urlPrefix:`${window.location.origin}./tools/bgzip`}]),i=await e.mount([{name:"data.bed",data:$}]);await e.exec(`bgzip ${i[0]}`),await e.exec(`tabix -p bed ${i[0]}.gz`);const h=await e.fs.stat(`${i[0]}.gz`),z=await e.read({path:`${i[0]}.gz`,length:h.size}),x=g(z),m=await e.fs.stat(`${i[0]}.gz.tbi`),M=await e.read({path:`${i[0]}.gz.tbi`,length:m.size}),S=g(M);o({raw:b,url:x,indexUrl:S})}}}const A=v();L(A,a=>a);export{A as t};
